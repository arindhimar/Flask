connection 


===JWT===
it basically has 3 parts = header , payload , footer

Header: The header contains metadata about the token, such as the algorithm used to sign the token (e.g., HMAC SHA256 or RSA) and the type of token (i.e., JWT). The header is Base64Url encoded.

Payload: The payload contains the actual data that you want to transmit, such as user information, permissions, or other claims. The payload is also Base64Url encoded.

Signature: The signature is generated by signing the header and payload with a secret key using the algorithm specified in the header. The signature is used to verify the authenticity of the token.

This is a decorator function named token_required that checks if a valid JWT token is present in the request before allowing the decorated function to execute.

Here's a step-by-step breakdown of what this decorator does:

It checks if a token parameter is present in the request arguments using request.args.get('token').
If no token is found, it returns a JSON response with a 401 status code, indicating that the token is missing.
If a token is found, it attempts to decode the token using the jwt.decode() function, passing the token and the secret key from the Flask app configuration.
If the token is invalid or cannot be decoded, it catches the exception and returns a JSON response with a 403 status code, indicating that the token is invalid.
If the token is valid, it calls the decorated function, passing the original arguments and keyword arguments.
By using this decorator, you can protect certain routes or functions in your Flask application from unauthorized access. Only requests that include a valid JWT token will be allowed to execute the decorated function.

To use this decorator, you would add it to a function like this: